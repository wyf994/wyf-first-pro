#include "GxIAPI.h" 
 
#include "DxImageProc.h"

#include <opencv2/core/core.hpp>

#include <opencv2/imgproc/imgproc.hpp>

#include <opencv2/highgui/highgui.hpp>

#include "opencv2/videoio.hpp"

#include <iostream>

 

using namespace std;

using namespace cv;


BYTE *m_pBufferRaw;


//图像回调处理函数

static void GX_STDC OnFrameCallbackFun(GX_FRAME_CALLBACK_PARAM* pFrame)

{

	//PrepareForShowImg();
	int64_t nWidth=pFrame->nWidth;//存入图像的宽度

	//std::cout<<nWidth<<std::endl;

    int64_t nHeight=pFrame->nHeight;//存入图像的高度

		//std::cout<<nHeight<<std::endl;

	BYTE *m_pBufferRaw=new BYTE[nWidth*nHeight];//计算大恒相机得到的图片缓冲区的大小，赋予动态内存？？

	BYTE *pRGB24Buf=new BYTE[nWidth*nHeight];//计算RGB三通道图片缓冲区的大小

	if(pFrame->status==0)
	{
		memcpy(m_pBufferRaw,pFrame->pImgBuf,pFrame->nImgSize);//由pImgBuf的内存区域复制nImgsize个字节给BufferRaw

		for(int i=0;i<nHeight;i++)
		{
		memcpy(pRGB24Buf+i*nWidth,m_pBufferRaw+(nHeight-i-1)*nWidth,(size_t)nWidth);//把BufferRaw的内存按照行列复制给RGB24的内存

	}
		IplImage* src=cvCreateImage(cvSize(nWidth,nHeight),8,1);//创建IplImage类型的src

		src->imageData=(char*)m_pBufferRaw;//在内存复制后，把char*的bufferRaw转化为src ,读取每一帧的视频文件

		//namedWindow("Image:",CV_WINDOW_NORMAL);//利用opencv，命名Image

		//cvShowImage("Image:",src);//利用opencv，显示Image

		
        Mat frame=cvarrToMat(src);

		//imwrite("G:\\sunpointimage\\1.jpg",frame);



		VideoWriter write;

		string outVideo ="Show_Example.avi";

		double fps=860.0;

		//int framenum=1000;

		//std::cout<<3<<std::endl;

        write.open(outVideo,CV_FOURCC('M','P','4','2'),fps,Size(640,480),true);

	    if(frame.empty())

		//std::cout<<1<<std::endl;

		//std::cout<<2<<std::endl;

		write.write(frame);//将图片写入视频文件

	   
		
		imshow("img",frame);
	

		std::cout<<2<<std::endl;
		
	    waitKey(1);
			/*while(framenum>0)
		{
			imwrite("G:\\sunpointimage\\1.jpg",frame);

			framenum--;
		}
		//imwrite("G:\\sunpointimage\\1.jpg",frame);

		}*/
		 write.release();
		
        cvReleaseImage(&src);//释放src的内存

	

		delete []m_pBufferRaw;//释放动态内存

		delete []pRGB24Buf;
	}
    
	return;

}
int main(int argc, char* argv[])

{

	GX_STATUS emStatus = GX_STATUS_SUCCESS;

	GX_OPEN_PARAM openParam;

	uint32_t      nDeviceNum = 0;

	GX_DEV_HANDLE m_hDevice;

	int64_t m_nImageHeight;

	int64_t m_nImageWidth;

	int64_t m_nPayLoadSize;
	
	int64_t m_nPixelColorFilter;
    
	Mat test;

	openParam.accessMode = GX_ACCESS_EXCLUSIVE;

	openParam.openMode = GX_OPEN_INDEX;

	openParam.pszContent = "1";

	// 初始化库 

	emStatus = GXInitLib();

	if (emStatus != GX_STATUS_SUCCESS)

	{

		return 0;

	}

	// 枚举设备列表

	emStatus = GXUpdateDeviceList(&nDeviceNum, 1000);

	if ((emStatus != GX_STATUS_SUCCESS) || (nDeviceNum <= 0))

	{

		return 0;

	}

	//打开设备

	emStatus = GXOpenDevice(&openParam, &m_hDevice);

	//设置采集模式连续采集

	emStatus = GXSetEnum(m_hDevice, GX_ENUM_ACQUISITION_MODE, GX_ACQ_MODE_CONTINUOUS);

	emStatus = GXSetInt(m_hDevice, GX_INT_ACQUISITION_SPEED_LEVEL, 1);

	emStatus = GXSetEnum(m_hDevice, GX_ENUM_BALANCE_WHITE_AUTO, GX_BALANCE_WHITE_AUTO_CONTINUOUS);

 

	//bool      bColorFliter = false;

	 //获取图像大小

	emStatus = GXGetInt(m_hDevice, GX_INT_PAYLOAD_SIZE, &m_nPayLoadSize);

	// 获取宽度

	emStatus = GXGetInt(m_hDevice, GX_INT_WIDTH, &m_nImageWidth);

	//获取高度

	emStatus = GXGetInt(m_hDevice, GX_INT_HEIGHT, &m_nImageHeight);


	//test.create(m_nImageHeight, m_nImageWidth, CV_8UC3);

    if(emStatus == GX_STATUS_SUCCESS)
	{
	//注册图像处理回调函数

	emStatus = GXRegisterCaptureCallback(m_hDevice, NULL, OnFrameCallbackFun);

	//发送开采命令

	emStatus = GXSendCommand(m_hDevice, GX_COMMAND_ACQUISITION_START);

	//---------------------

	//

	//在这个区间图像会通过OnFrameCallbackFun接口返给用户

	Sleep(10000);

	//

	//---------------------

	//发送停采命令

	emStatus = GXSendCommand(m_hDevice, GX_COMMAND_ACQUISITION_STOP);

	//注销采集回调

	emStatus = GXUnregisterCaptureCallback(m_hDevice);
	}
	//std::cout<<5<<std::endl;

	emStatus = GXCloseDevice(m_hDevice);

	emStatus = GXCloseLib();

	VideoCapture video;

	video.open("Show_Example.avi");

	//std::cout<<4<<std::endl;

	if(!video.isOpened())
	{
	cout<<-1<<endl;
	}
	while(true)
	{
	Mat new_frame;
	video>>new_frame;//new_frame是空的

	//std::cout<<6<<std::endl;
	
	imshow("video",new_frame);

	if(!new_frame.empty())
	{
	imshow("video",new_frame);
	}
	if(waitKey(30)>0)
	break;
	}

	return 0;


}
